 
package com.seal.util;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.log4j.Logger;

import com.seal.expand.SeedSelector.SeedingPolicy;
import com.seal.rank.Ranker.Feature;

public class GlobalVar {
  
  public static final String PROP_ENV_NAME = "SEAL_PROP";
  public static final String PROP_FILE_PATH = "seal.properties";
  public static final String COMMA_REGEXP = "\\s*,\\s*";
  public static final String CLUEWEB_TMP_DIR="clueweb.tmpdir";
  public static final String CLUEWEB_HEADER_TIMEOUT_MS = "clueweb.headerTimeout";
  public static final String CLUEWEB_TIMEOUT_NUMTRIALS = "clueweb.numtrials";
  public static final String CLUEWEB_TIMEOUT_REPORTING_MS = "clueweb.timeoutReporting";
  public static Logger log = Logger.getLogger(GlobalVar.class);
  
  private static GlobalVar gv = null;
  private static Properties prop = null;
  
  // Basic parameters
  private static String langID;
  private static Feature feature;
  private static boolean hasNoisySeeds;
  private static int useEngine;
  private static String yahooAPIKey;
  private static String yahooBossKey;
  private static long googleHitGapInMS;
  private static File resultDir;
  private static int minSeedsBracketed;
  private static String bingAPIKey;
  private static String googleCustomAPIKey;
  private static  String setExpander;

  // Fetching parameters
  private static int numResults;
  private static int numSubSeeds;
  
  // OfflineSeal and WrapperSavingAsia parameters
    private static boolean isFetchFromWeb; //wwc - keeps WebManager from getting stuff from web
    private static File localDir; //wwc - files that will be searched by the OfflineSearcher
    private static File indexDir; //wwc - index of files in localDir
    private static File localRoot; //wwc - set if files are indexed relative to some root directory
    private static File savedWrapperDir; //wwc - stores wrappers generated by OfflineSeal or WrapperSavingAsia
    private static int wrapperSaving; //wwc - policy on wrapper saving, 2 means save to savedWrapperDir

  // Optimization parameters
  private static int wrapperLevel;
  private static int minContextLength;
  private static int maxDocSizeInKB;
  private static int timeOutInMS;
  private static File cacheDir;
  private static File urlBlackList;
  private static File stopwordsList;
  
  // Iterative expansion parameters
  private static SeedingPolicy policy;
  private static int numExpansions;
  private static int numTrueSeeds;
  private static int numPossibleSeeds;
  
  // Bilingual
  private static String langID2;
  
  // Experiments parameters
  private static List<Feature> expFeatures;
  private static List<String> expDatasets;
  private static File evalDir;
  private static File dataDir;
  private static int numTrials;

  // Question Answering parameters
  private static int topSystem;
  private static boolean useGoogleSets;
  private static double ephyraThreshold;
  private static double sealThreshold;
  private static double interThreshold;
  private static double unionThreshold;
  private static double method1Threshold;
  

  private static boolean explicitRelations;
  private static boolean storeContentWeights;
  
  // ClueWeb parameters
  private static boolean cluewebKeepResponseFile;
  private static boolean cluewebKeepQueryFile;
  private static boolean cluewebMemoryManagement;
  private static boolean multiquery;
  /**
   * Looks for a GlobalVar in the following order:
   * 1) System environment: PROP_ENV_NAME
   * 2) Fixed location: PROP_FILE_PATH
   * @return
   */
  public static GlobalVar getGlobalVar() {
    if (gv != null) return gv;
    gv = new GlobalVar();
    String propFilePath = System.getenv(PROP_ENV_NAME);
    if (propFilePath == null) {
      propFilePath = System.getProperty(PROP_FILE_PATH,PROP_FILE_PATH);
    }
    gv.load(propFilePath);
    return gv;
  }

  public void load(String propFilePath) {
      File propFile = new File(propFilePath);
      log.debug("Loading seal.properties from "+propFilePath);
      prop = Helper.loadPropertiesFile(propFile);
      if (prop == null) {
        log.fatal("Missing \"" + PROP_FILE_PATH + "\" in your classpath!");
        System.exit(1);
      }
      //merge any command-line overrides
      Properties sysprop = System.getProperties();
      prop.putAll(sysprop); // this is messy(noisy) but easy
      
      gv.load(prop);
  }




  
  /**
   * Merges the input properties with the previously loaded properties.
   * Input property names overwrite the loaded property names.
   * @param in the input properties
   */
  public void merge(Properties in) {
    if (prop != null)
      prop.putAll(in);
    else prop = in;
    load(prop);
  }
  
  private static String getProperty(String key, String defaultValue) {
    if (prop == null) {
      log.warn("Properties file not found! Using default: \"" + defaultValue + 
               "\" for the property name: \"" + key + "\"");
      return defaultValue;
    }
    String value = prop.getProperty(key);
    if (value == null || value.trim().length() == 0) {
      log.warn("Missing or invalid property name: \"" + key + "\", using default: \"" + defaultValue + "\"");
      value = defaultValue;
    }
    return value;
  }
  
  private static void setProperties(Properties prop) {
    GlobalVar.prop = prop;
  }
  
  private static List<Feature> toFeatures(String in) {
    if (in == null) return null;
    String[] array = in.split(COMMA_REGEXP);
    List<Feature> list = new ArrayList<Feature>();
    for (String s : array) {
      Feature feature = Feature.valueOf(s.trim());
      if (feature != null)
        list.add(feature);
    }
    return list;
  }
  
  private static List<String> toStrings(String in) {
    if (in == null) return null;
    String[] array = in.split(COMMA_REGEXP);
    List<String> list = new ArrayList<String>();
    for (String s : array) {
      s = s.toLowerCase().trim();
      if (s.length() > 0)
        list.add(s);
    }
    return list;
  }
  
  private static File toFile(String in) {
    return in == null ? null : new File(in);
  }
  
  public void load(Properties prop) {
    setProperties(prop);
    
    // expansion parameters
    wrapperLevel = Integer.parseInt(getProperty("wrapperLevel", "0"));
    minSeedsBracketed = Integer.parseInt(getProperty("minSeedsBracketed", "0"));
    minContextLength = Integer.parseInt(getProperty("minContextLength", "1"));
    maxDocSizeInKB = Integer.parseInt(getProperty("maxDocSizeInKB", "512"));
    
    langID = getProperty("langID", "un");
    langID2 = getProperty("langID2", "un");
    yahooAPIKey = getProperty("yahooAPIKey", "");
    yahooBossKey = getProperty("yahooBossKey", "");
    bingAPIKey = getProperty("bingAPIKey","");
    googleCustomAPIKey = getProperty("googleCustomAPIKey","");
    numResults = Integer.parseInt(getProperty("numResults", "100"));
    numSubSeeds = Integer.parseInt(getProperty("numSubSeeds", "0"));
    timeOutInMS = Integer.parseInt(getProperty("timeOutInMS", "10000")); // 10 sec.
    isFetchFromWeb = Boolean.parseBoolean(getProperty("isFetchFromWeb", "true")); // wwc
    hasNoisySeeds = Boolean.parseBoolean(getProperty("hasNoisySeeds", "false"));
    useGoogleSets = Boolean.parseBoolean(getProperty("useGoogleSets", "false"));
    setExpander = getProperty("setExpander",
            useGoogleSets ?
            "com.rcwang.seal.expand.GoogleSets" : 
            "com.rcwang.seal.expand.Seal");
    useEngine = Integer.parseInt(getProperty("useEngine", "32"));
    cacheDir = toFile(getProperty("cacheDir", "cache"));
    localDir = toFile(getProperty("localDir", "local"));
    indexDir = toFile(getProperty("indexDir", "index")); // wwc
    localRoot = toFile(getProperty("localRoot", null)); // wwc
    savedWrapperDir = toFile(getProperty("savedWrapperDir", "wrapper")); // wwc
    wrapperSaving = Integer.parseInt(getProperty("wrapperSaving", "0")); // wwc
    resultDir = toFile(getProperty("resultDir", null));
    feature = Feature.valueOf(getProperty("feature", "WLW"));
    policy = SeedingPolicy.valueOf(getProperty("policy", "ISS_UNSUPERVISED"));
    numTrueSeeds = Integer.parseInt(getProperty("numTrueSeeds", "2"));
    numPossibleSeeds = Integer.parseInt(getProperty("numPossibleSeeds", "0"));
    // every hit to Google must be at least x milliseconds in between
    googleHitGapInMS = Long.parseLong(getProperty("googleHitGapInMS", "5000"));
    expFeatures = toFeatures(getProperty("expFeatures", null));
    expDatasets = toStrings(getProperty("expDatasets", null));
    urlBlackList = toFile(getProperty("urlBlackList", null));
    stopwordsList = toFile(getProperty("stopwordsList", null));
    
    // evaluation parameters
    evalDir = new File(getProperty("evalDir", "eval"));
    dataDir = new File(getProperty("dataDir", "data"));
    numTrials = Integer.parseInt(getProperty("numTrials", "0"));
    numExpansions = Integer.parseInt(getProperty("numExpansions", "0"));
    
    // qa
    topSystem = Integer.parseInt(getProperty("topSystem", "0"));
    ephyraThreshold = Double.parseDouble(getProperty("ephyraThreshold", "0"));
    sealThreshold = Double.parseDouble(getProperty("sealThreshold", "0"));
    interThreshold = Double.parseDouble(getProperty("interThreshold", "0"));
    unionThreshold = Double.parseDouble(getProperty("unionThreshold", "0"));
    method1Threshold = Double.parseDouble(getProperty("method1Threshold", "0"));
    
    // are all relations created using Entity(String,String) constructor?
    explicitRelations = Boolean.parseBoolean(getProperty("explicitRelations","false"));
    
    // should individual content weights be stored in addition to aggregated weights?
    // (for NELL scoring)
    storeContentWeights = Boolean.parseBoolean(getProperty("storeContentWeights","false"));
    
    // clueweb
    cluewebKeepQueryFile    = Boolean.parseBoolean(getProperty("cluewebKeepQueryFile","false"));
    cluewebKeepResponseFile = Boolean.parseBoolean(getProperty("cluewebKeepResponseFile","false"));
    cluewebMemoryManagement = Boolean.parseBoolean(getProperty("cluewebMemoryManagement","true"));
    multiquery = Boolean.parseBoolean(getProperty("multiquery","false"));
  }
  
  public Properties getProperties() { return prop; }
  
  public File getCacheDir() { return cacheDir; }
  public void setCacheDir(File cacheDir) { GlobalVar.cacheDir = cacheDir; }
  
  public File getIndexDir() { return indexDir; } //wwc
  public void setIndexDir(File indexDir) { GlobalVar.indexDir = indexDir; } //wwc

  public File getLocalDir() { return localDir; } //wwc
  public void setLocalDir(File localDir) { GlobalVar.localDir = localDir; } //wwc

  public File getLocalRoot() { return localRoot; } //wwc
  public void setRootOfIndexedFiles(File localRoot) { GlobalVar.localRoot = localRoot; } //wwc

  public File getSavedWrapperDir() { return savedWrapperDir; } //wwc
  public void setSavedWrapperDir(File savedWrapperDir) { GlobalVar.savedWrapperDir = savedWrapperDir; } //wwc

  public int getWrapperSaving() { return wrapperSaving; } //wwc
  public void setWrapperSaving(int wrapperSaving) { GlobalVar.wrapperSaving = wrapperSaving; } //wwc

  public File getDataDir() { return dataDir; }
  public void setDataDir(File dataDir) { GlobalVar.dataDir = dataDir; }
  
  public File getEvalDir() { return evalDir; }
  public void setEvalDir(File evalDir) { GlobalVar.evalDir = evalDir; }
  
  public String getLangID() { return langID; }
  public void setLangID(String langID) { GlobalVar.langID = langID; }
  
  public int getMaxDocSizeInKB() { return maxDocSizeInKB; }
  public void setMaxDocSizeInKB(int maxDocSizeInKB) { GlobalVar.maxDocSizeInKB = maxDocSizeInKB; }
  
  public int getMinContextLength() { return minContextLength; }
  public void setMinContextLength(int minContextLength) { GlobalVar.minContextLength = minContextLength; }
  
  public int getMinSeedsBracketed() { return minSeedsBracketed; }
  public void setMinSeedsBracketed(int minSeedsBracketed) { GlobalVar.minSeedsBracketed = minSeedsBracketed; }
  
  public int getNumExpansions() { return numExpansions; }
  public void setNumExpansions(int numExpansions) { GlobalVar.numExpansions = numExpansions; }
  
  public int getNumResults() { return numResults; }
  public void setNumResults(int numResults) { GlobalVar.numResults = numResults; }
  
  public int getNumSubSeeds() { return numSubSeeds; }
  public void setNumSubSeeds(int numSubSeeds) { GlobalVar.numSubSeeds = numSubSeeds; }
  
  public int getNumTrials() { return numTrials; }
  public void setNumTrials(int numTrials) { GlobalVar.numTrials = numTrials; }

  public File getResultDir() { return resultDir; }
  public void setResultDir(File resultDir) { GlobalVar.resultDir = resultDir; }
  
  public File getStopwordsList() { return stopwordsList; }
  public void setStopwordsList(File stopwordsList) { GlobalVar.stopwordsList = stopwordsList; }
  
  public int getTimeOutInMS() { return timeOutInMS; }
  public void setTimeOutInMS(int timeOutInMS) { GlobalVar.timeOutInMS = timeOutInMS; }
  
  public File getUrlBlackList() { return urlBlackList; }
  public void setUrlBlackList(File urlBlackList) { GlobalVar.urlBlackList = urlBlackList; }
  
  public String getYahooAPIKey() { return yahooAPIKey; }
  public void setYahooAPIKey(String yahooAPIKey) { GlobalVar.yahooAPIKey = yahooAPIKey; }
  
  public boolean getIsFetchFromWeb() { return isFetchFromWeb; } //wwc
  public void setIsFetchFromWeb(boolean isFetchFromWeb) { GlobalVar.isFetchFromWeb = isFetchFromWeb; } //wwc

  public boolean hasNoisySeeds() { return hasNoisySeeds; }
  public void setHasNoisySeeds(boolean hasNoisySeeds) { GlobalVar.hasNoisySeeds = hasNoisySeeds; }

  public Feature getFeature() { return feature; }
  public void setFeature(Feature feature) { GlobalVar.feature = feature; }
  
  public SeedingPolicy getPolicy() { return policy; }
  public void setPolicy(SeedingPolicy policy) { GlobalVar.policy = policy; }

  public int getNumPossibleSeeds() { return numPossibleSeeds; }
  public void setNumPossibleSeeds(int numPossibleSeeds) { GlobalVar.numPossibleSeeds = numPossibleSeeds; }

  public int getNumTrueSeeds() { return numTrueSeeds; }
  public void setNumTrueSeeds(int numTrueSeeds) { GlobalVar.numTrueSeeds = numTrueSeeds; }

  public List<Feature> getExpFeatures() { return expFeatures; }
  public void setExpFeatures(List<Feature> expFeatures) { GlobalVar.expFeatures = expFeatures; }

  public List<String> getExpDatasets() { return expDatasets; }
  public void setExpDatasets(List<String> expDatasets) { GlobalVar.expDatasets = expDatasets; }

  public long getGoogleHitGapInMS() { return googleHitGapInMS; }
  public void setGoogleHitGapInMS(long googleHitGap) { GlobalVar.googleHitGapInMS = googleHitGap; }

  public int getTopSystem() { return topSystem; }
  public void setTopSystem(int topSystem) { GlobalVar.topSystem = topSystem; }

  public double getEphyraThreshold() { return ephyraThreshold; }
  public void setEphyraThreshold(double ephyraThreshold) { GlobalVar.ephyraThreshold = ephyraThreshold; }

  public double getSealThreshold() { return sealThreshold; }
  public void setSealThreshold(double sealThreshold) { GlobalVar.sealThreshold = sealThreshold; }

  public double getInterThreshold() { return interThreshold; }
  public void setInterThreshold(double interThreshold) { GlobalVar.interThreshold = interThreshold; }

  public double getUnionThreshold() { return unionThreshold; }
  public void setUnionThreshold(double unionThreshold) { GlobalVar.unionThreshold = unionThreshold; }

  public double getMethod1Threshold() { return method1Threshold; }
  public void setMethod1Threshold(double method1Threshold) { GlobalVar.method1Threshold = method1Threshold; }

  public boolean isUseGoogleSets() { return useGoogleSets; }
  public void setUseGoogleSets(boolean useGoogleSets) {GlobalVar.useGoogleSets = useGoogleSets; }

  public String getLangID2() { return langID2; }
  public void setLangID2(String langID2) { GlobalVar.langID2 = langID2; }

  public int getUseEngine() { return useEngine; }
  public void setUseEngine(int useEngine) { GlobalVar.useEngine = useEngine; }

  public int getWrapperLevel() { return wrapperLevel; }
  public void setWrapperLevel(int wrapperLevel) { GlobalVar.wrapperLevel = wrapperLevel; }

  public String getYahooBossKey() { return yahooBossKey; }
  public void setYahooBossKey(String yahooBossKey) { GlobalVar.yahooBossKey = yahooBossKey; }

  public boolean getExplicitRelations() { return explicitRelations; }
  public boolean isStoreContentWeights() { return storeContentWeights; }

  public String getBingAPIKey() { return bingAPIKey; }
  public void setBingAPIKey(String k) { GlobalVar.bingAPIKey = k; }

  public String getGoogleCustomAPIKey() { return googleCustomAPIKey; }
  public void setGoogleCustomAPIKey(String k) { GlobalVar.googleCustomAPIKey = k; }
  
  public boolean getClueWebMemoryManagement() { return cluewebMemoryManagement; }
  public void setClueWebMemoryManagement(boolean b) { cluewebMemoryManagement = b; }
  
  public boolean getClueWebKeepResponseFile() { return cluewebKeepResponseFile; }
  public void setClueWebKeepResponseFile(boolean b) { cluewebKeepResponseFile = b; }
  
  public boolean getClueWebKeepQueryFile() { return cluewebKeepQueryFile; }
  public void setClueWebKeepQueryFile(boolean b) { cluewebKeepQueryFile = b; }
  
  public boolean isMultiquery() { return multiquery; }
  public void setMultiquery(boolean b) { multiquery = b; }




  public String getSetExpander() { return setExpander; }




 }
